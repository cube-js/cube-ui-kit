// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tasty() API should be able to override styles 1`] = `
.c0 {
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

.c0 {
  color: rgba(var(--clear-color-rgb),0.1);
  --current-color: var(--clear-color,clear);
  --current-color-rgb: var(--clear-color-rgb);
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should create element styles 1`] = `
.c0 {
  outline: none;
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

.c0[hidden] {
  display: none !important;
}

.c0:not([data-is-modified]) [data-element="Element"] {
  color: var(--dark-color);
  --current-color: var(--dark-color,dark);
  --current-color-rgb: var(--dark-color-rgb);
}

.c0[data-is-modified] [data-element="Element"] {
  color: var(--purple-color,rgba(0,0,0,1));
  --current-color: var(--purple-color,purple);
  --current-color-rgb: var(--purple-color-rgb);
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should create responsive styles 1`] = `
.c0 {
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

@media (min-width:980px) {
  .c0 {
    display: grid;
  }
}

@media (max-width:979px) {
  .c0 {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
  }
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should define style props 1`] = `
.c0 {
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

.c0 {
  border: var(--border-width) solid var(--border-color);
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should merge element styles 1`] = `
.c0 {
  outline: none;
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

.c0[hidden] {
  display: none !important;
}

.c0:not([data-is-modified]) [data-element="Element"] {
  color: var(--dark-color);
  --current-color: var(--dark-color,dark);
  --current-color-rgb: var(--dark-color-rgb);
}

.c0[data-is-modified] [data-element="Element"] {
  color: var(--purple-color,rgba(0,0,0,1));
  --current-color: var(--purple-color,purple);
  --current-color-rgb: var(--purple-color-rgb);
}

.c0 [data-element="Element"] {
  background-color: var(--black-color);
}

.c0 [data-element="Element"]>* {
  --context-fill-color: var(--black-color);
  --context-fill-color-rgb: var(--black-color-rgb);
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should merge styles 1`] = `
.c0 {
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

.c0:not([data-is-modified]) {
  color: var(--dark-color);
  --current-color: var(--dark-color,dark);
  --current-color-rgb: var(--dark-color-rgb);
}

.c0[data-is-modified] {
  color: var(--purple-color,rgba(0,0,0,1));
  --current-color: var(--purple-color,purple);
  --current-color-rgb: var(--purple-color-rgb);
}

.c0 {
  background-color: var(--black-color);
}

.c0>* {
  --context-fill-color: var(--black-color);
  --context-fill-color-rgb: var(--black-color-rgb);
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should merge styles in custom prop 1`] = `
.c0 {
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

<div>
  <div
    class="c0"
  />
</div>
`;

exports[`tasty() API should pass styles from tasty 1`] = `
.c0 {
  outline: none;
}

.c0[hidden] {
  display: none !important;
}

.c0 {
  color: rgba(var(--clear-color-rgb),0.1);
  --current-color: var(--clear-color,clear);
  --current-color-rgb: var(--clear-color-rgb);
}

<div>
  <div
    class="c0"
  />
</div>
`;
